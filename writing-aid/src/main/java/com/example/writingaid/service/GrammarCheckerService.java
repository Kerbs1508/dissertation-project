package com.example.writingaid.service;

import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import org.languagetool.JLanguageTool;
import org.languagetool.Language;
import org.languagetool.language.English;
import org.languagetool.rules.RuleMatch;
import org.languagetool.rules.patterns.AbstractPatternRule;
import org.languagetool.rules.patterns.PatternRule;
import org.languagetool.rules.patterns.PatternToken;
import org.languagetool.rules.patterns.XMLRuleHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.stereotype.Service;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLReaderFactory; //the project folder folders and this file were generated by SpringBoot inintaliser with alteraction on my side

@Service
public class GrammarCheckerService {

    private static final Logger logger = LoggerFactory.getLogger(GrammarCheckerService.class);
    private JLanguageTool languageTool;

    @Autowired
    private ResourceLoader resourceLoader;

    private static final Map<String, String[]> RULE_SET_MAPPING = Map.of(
            "default", new String[]{"file:src/main/resources/rules/minimal_rules.xml", "classpath:rules/style_rules.xml", "classpath:rules/more_style.xml"},
            "minimal", new String[]{"file:src/main/resources/rules/minimal_rules.xml"},
            "style-guide", new String[]{"classpath:rules/style_rules.xml", "classpath:rules/more_style.xml"},
            "spelling", new String[]{} //different set of rule that will be applied ro configuration
    );

    public List<RuleMatch> checkGrammar(String text) throws IOException {
        return checkGrammar(text, "default"); //checks grammar of text using defult rule set
    }

    public List<RuleMatch> checkGrammar(String text, String ruleSet) throws IOException {
        Language detectedLanguage = detectLanguage(text);
        try {
            languageTool = initializeLanguageToolWithRules(detectedLanguage, ruleSet);
        } catch (SAXException e) {
            logger.error("Error initializing LanguageTool due to SAXException: {}", e.getMessage());
            return Collections.emptyList(); 
        }
        if (languageTool != null) {
            return languageTool.check(text);
        } else {
            throw new IllegalStateException("LanguageTool not initialized.");
        }
    } //takes text, rules selected, detects language and uses LanguageTool to detect for any issues 

    private JLanguageTool initializeLanguageToolWithRules(Language language, String ruleSetName) throws SAXException, IOException {
    JLanguageTool tool = null;
    List<AbstractPatternRule> customRules = new ArrayList<>();

    try {
        tool = new JLanguageTool(language);

        if ("spelling".equals(ruleSetName)) {
            logger.info("Initializing LanguageTool and attempting to enable spelling rules.");
            int enabledCount = 0;
            for (org.languagetool.rules.Rule rule : tool.getAllActiveRules()) {
                if (rule.getId().toLowerCase().contains("spelling") || rule.getCategory().getName().toLowerCase().contains("spelling")) {
                    tool.enableRule(rule.getId());
                    logger.debug("Enabled spelling-related rule: {}", rule.getId());
                    enabledCount++;
                } 
            }
            logger.info("Enabled {} spelling-related rules.", enabledCount);
            logger.info("Spelling rule enabling attempt complete."); //if rule set is set to spelling, it enables rules from library
        } else {
            // Load custom rules from XML files for other rule sets
            XMLReader xmlReader = XMLReaderFactory.createXMLReader();
            xmlReader.setErrorHandler(new org.xml.sax.ErrorHandler() {
                @Override
                public void warning(SAXParseException exception) throws SAXException {
                    logger.warn("XML Warning: {}", exception.getMessage());
                } 

                @Override
                public void error(SAXParseException exception) throws SAXException {
                    logger.error("XML Error: {}", exception.getMessage());
                }

                @Override
                public void fatalError(SAXParseException exception) throws SAXException {
                    logger.error("XML Fatal Error: {}", exception.getMessage());
                }
            }); // use XML reader to look through Grammar files, asking system to log any errors 

            String[] ruleFiles = RULE_SET_MAPPING.getOrDefault(ruleSetName, new String[]{});
            for (String ruleFile : ruleFiles) {
                XMLRuleHandler ruleHandler = new XMLRuleHandler();
                Path filePath;
                if (ruleFile.startsWith("file:")) {
                    filePath = Paths.get(ruleFile.substring(5));
                } else {
                    Resource resource = resourceLoader.getResource(ruleFile);
                    if (!resource.exists()) {
                        logger.warn("Custom rule file not found: {}", ruleFile);
                        continue;
                    }
                    filePath = Paths.get(resource.getURI());
                } //fetches file paths for selected rule set snd runs through each file path to obtain files for custom rules

                if (Files.exists(filePath)) {
                    try (InputStream inputStream = Files.newInputStream(filePath)) {
                        InputSource inputSource = new InputSource(inputStream);
                        xmlReader.setContentHandler(ruleHandler);
                        xmlReader.parse(inputSource);
                        logger.info("Successfully parsed custom rules from: {}", filePath);
                        logger.debug("Number of rules found after parsing {}: {}", filePath, ruleHandler.getRules().size());
                        customRules.addAll(ruleHandler.getRules());
                    } catch (SAXException e) {
                        logger.error("Error parsing custom rules from {}: {}", filePath, e.getMessage());
                    } catch (IOException e) {
                        logger.error("IO error during rule loading: {}", e.getMessage());
                    }
                }
            } //checks if file path exists and uses XML handler to extract,process and add rules

            customRules.forEach(tool::addRule);
            logger.info("Total custom rules loaded: {}", customRules.size());
            logger.info("Number of active rules after loading custom rules for '{}': {}", tool.getAllActiveRules().size(), ruleSetName);
        }

    } catch (IllegalArgumentException e) {
        logger.error("Error initializing JLanguageTool: {}", e.getMessage());
        return null;
    }
    return tool;
}

    private Language detectLanguage(String text) {
        logger.info("Language detection temporarily disabled. Defaulting to English.");
        return new English();
    } // currently disabling language detection and returning as English
}