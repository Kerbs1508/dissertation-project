package com.example.writingaid.controller;

import java.io.IOException;
import java.util.List;

import org.languagetool.rules.RuleMatch;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.writingaid.service.GrammarCheckerService;
//the project folder folders and this file were generated by SpringBoot inintaliser with alteraction on my side
@Controller
public class WritingAidController {

    private static final Logger logger = LoggerFactory.getLogger(WritingAidController.class);

    @Autowired
    private GrammarCheckerService grammarCheckerService;

    @GetMapping("/")
    public String showForm() {
        return "index";
    }

    @PostMapping("/check")
    public String checkText(@RequestParam("text") String text, @RequestParam(value = "ruleSet", defaultValue = "default") String ruleSet, Model model) {
        try {
            List<RuleMatch> matches = grammarCheckerService.checkGrammar(text, ruleSet);
            model.addAttribute("matches", matches);
            model.addAttribute("inputText", text);

            // Create highlighted text
            StringBuilder highlightedText = new StringBuilder(text);
            int offsetCorrection = 0;
            for (RuleMatch match : matches) {
                int start = match.getFromPos() + offsetCorrection;
                int end = match.getToPos() + offsetCorrection;
                String errorSpanStart = "<span class='error-highlight'>";
                String errorSpanEnd = "</span>";
                highlightedText.insert(start, errorSpanStart);
                highlightedText.insert(end + errorSpanStart.length(), errorSpanEnd);
                offsetCorrection += errorSpanStart.length() + errorSpanEnd.length();
            }
            model.addAttribute("highlightedText", highlightedText.toString());

            // Create suggested corrected text 
            String correctedText = applyFirstSuggestions(text, matches);
            model.addAttribute("correctedText", correctedText);

            return "results";
        } catch (IOException e) {
            logger.error("An IOException occurred during grammar checking:", e);
            model.addAttribute("error", "An unexpected error occurred while checking your text. Please try again later.");
            return "error";
        }
    }

    private String applyFirstSuggestions(String text, List<RuleMatch> matches) {
        StringBuilder correctedText = new StringBuilder(text);
        // Applying reverse iteration to avoid index issues 
        for (int i = matches.size() - 1; i >= 0; i--) {
            RuleMatch match = matches.get(i);
            List<String> suggestions = match.getSuggestedReplacements();
            if (!suggestions.isEmpty()) {
                String replacement = suggestions.get(0);
                int start = match.getFromPos();
                int end = match.getToPos();
                correctedText.replace(start, end, replacement); //Modifies text
            }
        }
        return correctedText.toString(); //After loop contains corrected text
    }
}